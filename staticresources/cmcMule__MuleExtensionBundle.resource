{
  "recordTypeMap": {},
  "RecordSetBundles": [
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v56.0/sobjects/copado__Function__c/a0l1w000009ZQt9AAG"
          },
          "copado__API_Name__c": "Mule_Promote",
          "copado__Image_Name__c": "copado-multicloud-mulesoft:v1",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : true,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_email\",\n  \"defaultValue\" : \"{$User.Email}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_name\",\n  \"defaultValue\" : \"{$User.Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_depth\",\n  \"defaultValue\" : \"{$Pipeline.property.git_depth}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"file_changes_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"promotion_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.promotionBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"target_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.destinationBranchName}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"user_stories\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.userStoryBranches}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"promotion_id\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"repository_id\",\n  \"defaultValue\" : \"{$Pipeline.Git_Repository__r.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"release_version\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.Release__r.Version__c}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"exclude_autoresolve\",\n  \"defaultValue\" : \"{$Pipeline.property.exclude_autoresolve}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"conflict_resolution_attachments\",\n  \"defaultValue\" : \"{$Context.apex.GetConflictResolutionAttachments}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"smart_conflict_resolution_enabled\",\n  \"defaultValue\" : \"{$Pipeline.property.smart_conflict_resolution_enabled}\"\n}, {\n  \"name\" : \"upload_to_artifact\",\n  \"defaultValue\" : \"false\"\n}, {\n  \"name\" : \"artifact_url\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"artifact_username\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"artifact_password\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"artifact_profile\",\n  \"defaultValue\" : \"\"\n} ]",
          "copado__Script__c": "#!/bin/bash\nset -euo pipefail\ncd /app\n\nsource copado_init\nfunction_parameter git_json '{$Context.Repository.Credential}'\nfunction_parameter git_email '{$User.Email}'\nfunction_parameter git_name '{$User.Name}'\nfunction_parameter git_depth '{$Pipeline.property.git_depth}'\nfunction_parameter file_changes_id '{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}'\nfunction_parameter promotion_branch '{$Context.JobExecution__r.DataJson.promotionBranchName}'\nfunction_parameter target_branch '{$Context.JobExecution__r.DataJson.destinationBranchName}'\nfunction_parameter user_stories '{$Context.JobExecution__r.DataJson.userStoryBranches}'\nfunction_parameter promotion_id '{$Job.ExecutionParent.Id}'\nfunction_parameter repository_id '{$Pipeline.Git_Repository__r.Id}'\nfunction_parameter release_version '{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}' --optional\nfunction_parameter exclude_autoresolve '{$Pipeline.property.exclude_autoresolve}'\nfunction_parameter conflict_resolution_attachments '{$Context.apex.GetConflictResolutionAttachments}'\nfunction_parameter smart_conflict_resolution_enabled '{$Pipeline.property.smart_conflict_resolution_enabled}'\n\nfunction fail_if_online_conflict_required() {\n    local exit_code=\"$1\"\n    if [[ $exit_code -eq 22 ]]; then\n        copado_finish 22 \"Conflict found while merging\" '{\"status\": \"conflicts\"}' \"Online conflict resolution required. Please correct the conflicts in the Promotion\"\n    fi\n}\n\nfunction fail_if_review_failed() {\n    local exit_code=\"$1\"\n    if [[ $exit_code -ne 0 ]]; then\n        copado_finish \"$exit_code\" \"Error reviewing conflicts. The error code was $exit_code\" \"\" \"Error reviewing conflicts. Please review the Logs of the operation\";\n    fi\n}\n\nfunction git_checkout_feature_branches() {\n    for merge_branch in \"${branches[@]}\"; do\n        git checkout -q \"$merge_branch\"\n    done\n}\n\n# get the feature branches from the parameters, filter out branches that do not exist in the remote, and leave the\n# result in the \"$branches\" variable\nfunction parse_feature_branches() {\n    jq -r -c '.[]' <<< \"$user_stories\" > ~/.git_branches.txt\n    readarray -t branches < ~/.git_branches.txt\n    echo \"[feature_branches] reading feature branches  ${branches[*]};\"\n    git ls-remote -h origin -- \"${branches[@]}\" | sed -e 's|^.*refs/heads/||g' > ~/.git_branches.txt\n    readarray -t branches < ~/.git_branches.txt\n    echo \"[feature_branches] existing feature branches ${branches[*]};\"\n}\n\n# merge each branch, in order, to the feature branch, resolving merges and conflicts, and committing the changes, if any.\nfunction merge_copado() {\n    for merge_branch in \"${branches[@]}\"; do\n        echo $'\\n'\"[merging] $merge_branch\"\n        # never fail, copado will process the result\n        git merge -- \"$merge_branch\" | limit_output || true\n        git status --porcelain=v2 > ~/.git_merge_result.txt\n        exit_code=0; copado_conflict_resolution --promotion-id \"$promotion_id\" --feature-branch \"$merge_branch\" || exit_code=$?\n        fail_if_online_conflict_required $exit_code\n        fail_if_review_failed $exit_code\n        git add .\n        # never fail, there might not be anything to commit\n        git commit -am \"Copado automatic merge of $merge_branch\" || true\n    done\n}\n\nfunction upload_to_artifact() {\n\tif [ \"$upload_to_artifact\" = \"true\" ]; then\n      version=\"$release_version-SNAPSHOT\"\n      mvn versions:set -DnewVersion=\"$version\" -P \"$artifact_profile\"\n\n      mvn clean package deploy -e -Dartifact_url=\"$artifact_url\" \\\n              -Dversion=\"$version\" -Dartifact_username=\"$artifact_username\" \\\n              -Dartifact_password=\"$artifact_password\" -P \"$artifact_profile\"\n\tfi\n}\n\ncopado_files --download-id \"$file_changes_id\" --destination ~/.changes.json --do-not-overwrite\ncopado_log_changes\n\ncopado -p \"Preparing repository\"\ncopado_git --initialize-only \"$target_branch\"\nparse_feature_branches\ncopado -p \"Fetching branches\"\nprofiler copado_git --depth \"$git_depth\" -- \"$target_branch\" \"${branches[*]}\"\nprofiler git_checkout_feature_branches\n\necho \"[promotion] re-creating promotion branch\"\ngit checkout -b \"$promotion_branch\" \"$target_branch\"\n\ncopado -p \"Merging branches into promotion\"\necho \"$conflict_resolution_attachments\" > ~/.online_resolved.json\nprofiler merge_copado\n\ncopado_log_git_history \"$target_branch\" \"$promotion_branch\"\n\nprofiler upload_to_artifact\n\ncopado -p \"Pushing branch\"\n# delete the remote branch if it already exists, never fail\n[[ -n \"$(git ls-remote -h origin \"$promotion_branch\")\" ]] \\\n    && git push origin --quiet --delete \"$promotion_branch\" || true\n# tag the release, if present\n[[ -n \"$release_version\" ]] && git tag \"$release_version\"\nprofiler git push origin --follow-tags \"$promotion_branch\"\n\ncopado_finish 0 \"Promote completed successfully (${SECONDS}s)\" \"\"",
          "copado__Type__c": "Standard",
          "copado__Version__c": "1",
          "copado__Worker_Size__c": "M",
          "Id": "a0l1w000009ZQt9AAG",
          "LastReferencedDate": "2022-08-29T07:17:41.000+0000",
          "LastViewedDate": "2022-08-29T07:17:41.000+0000",
          "Name": "Mule Promote"
        },
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v56.0/sobjects/copado__Function__c/a0l1w000009ZSdVAAW"
          },
          "copado__API_Name__c": "Mule_Deploy",
          "copado__Image_Name__c": "copado-multicloud-mulesoft:v1",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : true,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_email\",\n  \"defaultValue\" : \"{$User.Email}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_name\",\n  \"defaultValue\" : \"{$User.Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_depth\",\n  \"defaultValue\" : \"{$Pipeline.property.git_depth}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"file_changes_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"promotion_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.promotionBranchName}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"target_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.destinationBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"replacement_rules\",\n  \"defaultValue\" : \"{$Pipeline.property.replacement_rules}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"environment_variables\",\n  \"defaultValue\" : \"{$Destination.apex.EnvironmentVariables}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"release_version\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"deploy_id\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"dry_run\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.deploymentDryRun}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"builder_config\",\n  \"defaultValue\" : \"{$Destination.property.builder_config}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"rollback_enabled\",\n  \"defaultValue\" : \"true\"\n}, {\n  \"required\" : true,\n  \"name\" : \"app_name\",\n  \"defaultValue\" : \"{$Destination.Property.Mule_App_Name}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"client_id\",\n  \"defaultValue\" : \"{$Pipeline.Property.Mule_Client_Id}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"client_secret\",\n  \"defaultValue\" : \"{$Pipeline.Property.Mule_Client_Secret}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"environment_name\",\n  \"defaultValue\" : \"{$Destination.Property.Mule_Environment_Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"worker_count\",\n  \"defaultValue\" : \"{$Destination.Property.Mule_Worker_Count}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"worker_type\",\n  \"defaultValue\" : \"{$Destination.Property.Mule_Worker_Type}\"\n}, {\n  \"name\" : \"skip_test\",\n  \"defaultValue\" : \"{$Destination.Property.Mule_Skip_Test}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"runtime_version\",\n  \"defaultValue\" : \"{$Pipeline.Property.Mule_Runtime_Version}\"\n}, {\n  \"name\" : \"enterprise_username\",\n  \"defaultValue\" : \"{$Pipeline.Property.Enterprise_Username}\"\n}, {\n  \"name\" : \"enterprise_password\",\n  \"defaultValue\" : \"{$Pipeline.Property.Enterprise_Password}\"\n}, {\n  \"name\" : \"region\",\n  \"defaultValue\" : \"{$Pipeline.Property.Region}\"\n}, {\n  \"name\" : \"verbose_debug\",\n  \"defaultValue\" : \"false\"\n}, {\n  \"name\" : \"environment_properties\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"global_properties\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"extra_flags\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"deploy_from_artifact\",\n  \"defaultValue\" : \"false\"\n}, {\n  \"name\" : \"artifact_username\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"artifact_password\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"artifact_profile\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"artifact_url\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"artifact_name\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"artifact_id\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"application_directory\",\n  \"defaultValue\" : \"{$Pipeline.Property.Application_Directory}\"\n}, {\n  \"name\" : \"environment_type\",\n  \"defaultValue\" : \"{$Destination.Property.Mule_Environment_Type}\"\n}, {\n  \"name\" : \"provider\",\n  \"defaultValue\" : \"{$Destination.Property.Provider}\"\n}, {\n  \"name\" : \"replicas\",\n  \"defaultValue\" : \"{$Destination.Property.Replicas}\"\n}, {\n  \"name\" : \"target\",\n  \"defaultValue\" : \"{$Destination.Property.Target}\"\n}, {\n  \"name\" : \"skip_license\",\n  \"defaultValue\" : \"{$Destination.Property.Mule_Skip_license}\"\n}, {\n  \"name\" : \"client_credentials\",\n  \"defaultValue\" : \"{$Pipeline.Property.Mule_Client_Credentials}\"\n} ]",
          "copado__Script__c": "#!/bin/bash \nset -euo pipefail # set up error handling: fail on any command with exit code !=0 , fail with undefined variables.\nexport SHELLOPTS # export the settings for all subshells. Be careful with the \"u\" (undefined variables) flag, some tools (such as maven) fail.\ncd /app\n\nsource copado_init\nfunction_parameter git_json '{$Context.Repository.Credential}'\nfunction_parameter git_email '{$User.Email}'\nfunction_parameter git_name '{$User.Name}'\nfunction_parameter git_depth '{$Pipeline.property.git_depth}'\nfunction_parameter file_changes_id '{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}'\nfunction_parameter promotion_branch '{$Context.JobExecution__r.DataJson.promotionBranchName}'\nfunction_parameter target_branch '{$Context.JobExecution__r.DataJson.destinationBranchName}'\nfunction_parameter replacement_rules '{$Pipeline.property.replacement_rules}' --optional\nfunction_parameter environment_variables '{$Destination.apex.EnvironmentVariables}'\nfunction_parameter release_version '{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}' --optional\nfunction_parameter deploy_id '{$Job.ExecutionParent.Id}'\nfunction_parameter dry_run '{$Context.JobExecution__r.DataJson.deploymentDryRun}'\nfunction_parameter builder_config '{$Destination.property.builder_config}'\nfunction_parameter rollback_enabled 'true'\n\nfunction verify_client_id_secret() {\n\tauth_http_code=$(curl --silent --output /dev/stderr --write-out \"%{http_code}\" --location --request POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \\\n                      --header 'Content-Type: application/x-www-form-urlencoded' \\\n                      --data-urlencode 'client_id='$client_id \\\n                      --data-urlencode 'client_secret'=$client_secret \\\n                      --data-urlencode 'grant_type=client_credentials')\n\n    if test $auth_http_code -ne 200; then\n        copado -p 'Invalid credential error' --error-message 'Invalid Client Id or Client Secret'\n        exit 1\n    fi\n}\n\n# This function is parsing the logs with the required values\nfunction parse_unstructured_logs {\n    str=\"${1#*${2}}\"\n    str=\"${str%%$3*}\"\n    parsed_value=$str\n}\n\nexport -f parse_unstructured_logs\n\nfunction pom_error_handling() {\n\n\tif [ ! -f \"pom.xml\" ]; then\n\t\tcopado -p \"pom.xml not found\" --error-message \"Valid pom.xml is not available in the given application directory\"\n\texit 1\n\tfi\n \n\t#if [[ ! -z $application_directory ]]; then\n\t#\tcd ..\n\t#fi\n}\n\nfunction process_function_parameters() {\n    if [ \"$environment_properties\" ]; then\n    \tenvironment_options=($(node -p \"(Object.entries($environment_properties).map(([k, v]) => '-D' + k + '=' + v).join(' '))\"));\n    else\n    \tenvironment_options=();\n    fi\n\n\tif [ \"$global_properties\" ]; then\n\t\tglobal_options=($(node -p \"(Object.entries($global_properties).map(([k, v]) => '-D' + k + '=' + v).join(' '))\"));\n\telse\n\t\tglobal_options=();\n\tfi\n\n\tif [ \"$extra_flags\" ]; then additional_flags=(\"$extra_flags\"); else additional_flags=(); fi\n\tif [ \"$skip_test\" = \"true\" ]; then skip_test_option=(-DskipTests); else skip_test_option=(); fi\n\tif [ \"$verbose_debug\" = \"true\" ]; then debug_option=(-X); else debug_option=(); fi\n    if [ \"$skip_license\" = \"true\" ]; then skip_license=(-Dlicense.skip); else skip_license=(); fi\n\n\tmkdir -p /home/func/.m2\n\n\tif [[ -z \"$release_version\" && \"$deploy_from_artifact\" = \"true\" ]]; then\n\t\tcopado -p \"Failed\" -e \"Please add a valid release tag\";\n\t\texit 1;\n\tfi\n}\n\nfunction deploy_from_rtf() {\nif [ -z \"$target\" ] || [ -z \"$provider\" ] || [ -z \"$replicas\" ]; then\ncopado -p \"Failed\" -e \"Missing values for following required paramters - target/provider/replicas\";\n    exit 1;\nfi\ncat << __EOF__ > /home/func/.m2/settings.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <servers>\n        <server>\n            <id>MuleRepository</id>\n            <username>$enterprise_username</username>\n            <password>$enterprise_password</password>\n        </server>\n    </servers>\n</settings>\n__EOF__\n\ncopado --progress \"Uploading artifact to anypoint exchange\";\nmvn clean deploy \"${skip_test_option[@]}\" \"${skip_license[@]}\"    \n      \ncopado --progress \"Deploying to runtime fabric server\";\nmvn clean package deploy -DmuleDeploy  -e -Dclientid=\"$client_id\" \\\n        -Dclientsecret=\"$client_secret\" -Dclientcredentials=\"$client_credentials\" \\\n        -Dappname=\"$app_name\" -Denvironment=\"$environment_name\" -Dtarget=\"$target\" \\\n        -Dprovider=\"$provider\" -Dreplicas=\"$replicas\"\n}\n\nexport -f deploy_from_rtf\n\nfunction deploy_from_artifact() { \ncat << __EOF__ > /home/func/.m2/settings.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <servers>\n        <server>\n            <id>snapshots</id>\n            <username>$artifact_username</username>\n            <password>$artifact_password</password>\n        </server>\n        <server>\n            <id>MuleRepository</id>\n            <username>$enterprise_username</username>\n            <password>$enterprise_password</password>\n        </server>\n    </servers>\n    <profiles>\n        <profile>\n            <repositories>\n                <repository>\n                    <snapshots />\n                    <id>snapshots</id>\n                    <name>mule-poc</name>\n                    <url>$artifact_url/$artifact_name</url>\n                </repository>\n            </repositories>\n            <pluginRepositories>\n                <pluginRepository>\n                    <snapshots />\n                    <id>snapshots</id>\n                    <name>mule-poc</name>\n                    <url>$artifact_url/$artifact_name</url>\n                </pluginRepository>\n            </pluginRepositories>\n            <id>artifactory</id>\n        </profile>\n    </profiles>\n    <activeProfiles>\n        <activeProfile>artifactory</activeProfile>\n    </activeProfiles>\n</settings>\n__EOF__\n\ncat /home/func/.m2/settings.xml\nversion=\"$tag-SNAPSHOT\";\n\ncopado --progress \"Downloading from artifact\";\nmvn dependency:get -Ddest=./muledeploy.jar -DgroupId=com.mycompany \\\n    -DartifactId=\"$artifact_id\" -Dversion=\"$version\" -Dclassifier=mule-application \\\n    -Dpackaging=jar -s /home/func/.m2/settings.xml -P \"$artifact_profile\"\n\ncopado --progress \"starting deployment(From jfrog)\";\n   {\n     mvn mule:deploy -Dmule.artifact=\"./muledeploy.jar\" -e \\\n            -Dclientid=\"$client_id\" -Dclientsecret=\"$client_secret\" \\\n            -Dappname=\"$app_name\" -Denvironment=\"$environment_name\" -DworkerCount=\"$worker_count\" \\\n            -DworkerType=\"$worker_type\" -Druntime_version=\"$runtime_version\" -Dregion=\"$region\" -P \"mulesoft-releases\" \\\n            \"${skip_test_option[@]}\" \"${environment_options[@]}\" \"${global_options[@]}\" \"${additional_flags[@]}\" \"${debug_option[@]}\"\n    } | tee /tmp/output.txt ||\n    {\n        maven_logs=\"$(< /tmp/output.txt)\";\n        parse_unstructured_logs \"$maven_logs\" \"\\\"message\\\":\\\"\" \"\\\"}\";\n        copado -p 'Deploy Unsuccessful!' --error-message \"$parsed_value\";\n        exit 1;\n    }\n}\n\nexport -f deploy_from_artifact\n\nfunction deploy_from_repository() {\ncat << __EOF__ > /home/func/.m2/settings.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <servers>\n        <server>\n            <id>MuleRepository</id>\n            <username>$enterprise_username</username>\n            <password>$enterprise_password</password>\n        </server>\n    </servers>\n</settings>\n__EOF__\n   copado --progress \"starting deployment(Mule clean)\";\n   {\n      mvn clean deploy package -DmuleDeploy -e -Dclientid=\"$client_id\" \\\n        -Dclientsecret=\"$client_secret\" \\\n        -Dappname=\"$app_name\" -Denvironment=\"$environment_name\" -DworkerCount=\"$worker_count\" \\\n        -DworkerType=\"$worker_type\" -Druntime_version=\"$runtime_version\" -Dregion=\"$region\" \\\n        \"${skip_test_option[@]}\" \"${environment_options[@]}\" \"${global_options[@]}\" \"${additional_flags[@]}\" \"${debug_option[@]}\"\n    } | tee /tmp/output.txt ||\n    {\n       maven_logs=\"$(< /tmp/output.txt)\";\n       parse_unstructured_logs \"$maven_logs\" \"\\\"message\\\":\\\"\" \"\\\"}\"; \n       copado -p 'Deploy Unsuccessful!' --error-message \"$parsed_value\"\n       exit 1\n   }\n}\n \nexport -f deploy_from_repository\n\nfunction mule_deploy() {\n\t\n    if [ \"$environment_type\" == \"rtf\" ]; then\n        profiler deploy_from_rtf\n\telif [ \"$deploy_from_artifact\" = \"true\" ]; then\n    \tprofiler deploy_from_artifact\n\telse\n    \tprofiler deploy_from_repository\n\tfi\n}\n\nexport -f mule_deploy\n\nprofiler verify_client_id_secret\n\nprofiler process_function_parameters\n\ncopado_files --download-id \"$file_changes_id\" --destination ~/.changes.json --do-not-overwrite\ncopado_log_changes\n\ncopado -p \"fetching branches\"\nprofiler copado_git --depth \"$git_depth\" \"$promotion_branch\" \"$target_branch\"\n\nif [[ \"$rollback_enabled\" == \"true\" && \"$dry_run\" != \"true\" ]]; then\n    copado -p \"preparing rollback branch\"\n    rollback_branch=\"${promotion_branch/promotion/rollback-promotion}\"\n    # delete the remote branch if it already exists\n    [[ -n \"$(git ls-remote -h origin \"$rollback_branch\")\" ]] \\\n        && git push origin --quiet --delete \"$rollback_branch\" || true\n    git checkout \"$target_branch\"\n    copado_git --depth \"$git_depth\" -c \"$rollback_branch\"\n    echo\nfi\n\ncopado -p \"Merging branches\"\ngit checkout \"$promotion_branch\"\ngit checkout \"$target_branch\"\n# merge before deploying, to fail early if the merge cannot happen due to conflicts\ngit merge --no-progress \"$promotion_branch\" | limit_output \\\n    || copado_finish  1 \"git merge failed\" \"{}\" \"Could not merge promotion branch into destination branch\"\n\ncopado -p \"Applying replacement rules and environment rules...\"\necho \"$replacement_rules\" > ~/.replacement_rules.json\necho \"$environment_variables\" > ~/.environment_variables.json\nprofiler copado_replacer --branch \"$target_branch\"\n\nprofiler pom_error_handling\n\necho \"$builder_config\" > ~/.builder_config.json\nif [ \"$dry_run\" == 'true' ]; then\n    #copado -p \"Deploying (dry run) the promotion branch\"\n    #profiler copado_builder\n    copado -p \"Pre-Deployment validation completed successful (${SECONDS}s)\"\nelse\n    copado -p \"Deploying the changes of the promotion branch $promotion_branch\"\n    profiler copado_builder\n\n    copado -p \"Pushing result\"\n    git checkout -- .  # clear any change made by copado_replacer\n    profiler git push --all origin \\\n        || copado_finish 1 \"Deployment successful, but git merge failed\" \"{}\" \"Could not merge promotion branch into destination branch\"\n    copado_finish 0 \"Deployment successful (${SECONDS}s)\" \"{}\" \"\"\nfi",
          "copado__Timeout__c": 10,
          "copado__Type__c": "Standard",
          "copado__Version__c": "1",
          "copado__Worker_Size__c": "M",
          "Id": "a0l1w000009ZSdVAAW",
          "LastReferencedDate": "2022-08-29T08:10:28.000+0000",
          "LastViewedDate": "2022-08-29T08:10:28.000+0000",
          "Name": "Mule Deploy"
        }
      ],
      "ObjectType": "copado__Function__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v56.0/sobjects/copado__JobTemplate__c/a0u1w000008FQnfAAG"
          },
          "copado__ApiName__c": "Mule_Promote_1",
          "copado__Type__c": "Standard",
          "copado__Version__c": 1,
          "Id": "a0u1w000008FQnfAAG",
          "LastReferencedDate": "2022-08-29T07:22:13.000+0000",
          "LastViewedDate": "2022-08-29T07:22:13.000+0000",
          "Name": "Mule_Promote"
        },
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v56.0/sobjects/copado__JobTemplate__c/a0u1w000008FQnkAAG"
          },
          "copado__ApiName__c": "Mule_Deploy_1",
          "copado__Type__c": "Standard",
          "copado__Version__c": 1,
          "Id": "a0u1w000008FQnkAAG",
          "LastReferencedDate": "2022-08-29T08:10:53.000+0000",
          "LastViewedDate": "2022-08-29T08:10:53.000+0000",
          "Name": "Mule_Deploy"
        }
      ],
      "ObjectType": "copado__JobTemplate__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v56.0/sobjects/copado__JobStep__c/a0t1w000005YqicAAC"
          },
          "copado__ApiName__c": "Mule_Promote_1_Mule_Promote",
          "copado__ConfigJson__c": "{\"functionName\":\"Mule_Promote\",\"parameters\":[{\"name\":\"git_json\",\"value\":\"{$Context.Repository.Credential}\",\"required\":true},{\"name\":\"git_email\",\"value\":\"{$User.Email}\",\"required\":false},{\"name\":\"git_name\",\"value\":\"{$User.Name}\",\"required\":false},{\"name\":\"git_depth\",\"value\":\"{$Pipeline.property.git_depth}\",\"required\":false},{\"name\":\"file_changes_id\",\"value\":\"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\",\"required\":false},{\"name\":\"promotion_branch\",\"value\":\"{$Context.JobExecution__r.DataJson.promotionBranchName}\",\"required\":true},{\"name\":\"target_branch\",\"value\":\"{$Context.JobExecution__r.DataJson.destinationBranchName}\",\"required\":false},{\"name\":\"user_stories\",\"value\":\"{$Context.JobExecution__r.DataJson.userStoryBranches}\",\"required\":true},{\"name\":\"promotion_id\",\"value\":\"{$Job.ExecutionParent.Id}\",\"required\":false},{\"name\":\"repository_id\",\"value\":\"{$Pipeline.Git_Repository__r.Id}\",\"required\":false},{\"name\":\"release_version\",\"value\":\"{$Job.ExecutionParent.Release__r.Version__c}\",\"required\":false},{\"name\":\"exclude_autoresolve\",\"value\":\"{$Pipeline.property.exclude_autoresolve}\",\"required\":false},{\"name\":\"conflict_resolution_attachments\",\"value\":\"{$Context.apex.GetConflictResolutionAttachments}\",\"required\":false},{\"name\":\"smart_conflict_resolution_enabled\",\"value\":\"{$Pipeline.property.smart_conflict_resolution_enabled}\",\"required\":false},{\"name\":\"upload_to_artifact\",\"value\":\"false\"},{\"name\":\"artifact_url\",\"value\":\"\"},{\"name\":\"artifact_username\",\"value\":\"\"},{\"name\":\"artifact_password\",\"value\":\"\"},{\"name\":\"artifact_profile\",\"value\":\"\"}]}",
          "copado__CustomType__c": "Function",
          "copado__JobTemplate__c": "a0u1w000008FQnfAAG",
          "copado__Order__c": 1,
          "copado__Type__c": "Function",
          "Id": "a0t1w000005YqicAAC",
          "Name": "Mule_Promote"
        },
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v56.0/sobjects/copado__JobStep__c/a0t1w000005YqihAAC"
          },
          "copado__ApiName__c": "Mule_Deploy_1_Mule_Deploy",
          "copado__ConfigJson__c": "{\"functionName\":\"Mule_Deploy\",\"parameters\":[{\"name\":\"git_json\",\"value\":\"{$Context.Repository.Credential}\",\"required\":true},{\"name\":\"git_email\",\"value\":\"{$User.Email}\",\"required\":false},{\"name\":\"git_name\",\"value\":\"{$User.Name}\",\"required\":false},{\"name\":\"git_depth\",\"value\":\"{$Pipeline.property.git_depth}\",\"required\":false},{\"name\":\"file_changes_id\",\"value\":\"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\",\"required\":false},{\"name\":\"promotion_branch\",\"value\":\"{$Context.JobExecution__r.DataJson.promotionBranchName}\",\"required\":true},{\"name\":\"target_branch\",\"value\":\"{$Context.JobExecution__r.DataJson.destinationBranchName}\",\"required\":true},{\"name\":\"replacement_rules\",\"value\":\"{$Pipeline.property.replacement_rules}\",\"required\":false},{\"name\":\"environment_variables\",\"value\":\"{$Destination.apex.EnvironmentVariables}\",\"required\":false},{\"name\":\"release_version\",\"value\":\"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\",\"required\":false},{\"name\":\"deploy_id\",\"value\":\"{$Job.ExecutionParent.Id}\",\"required\":false},{\"name\":\"dry_run\",\"value\":\"{$Context.JobExecution__r.DataJson.deploymentDryRun}\",\"required\":false},{\"name\":\"builder_config\",\"value\":\"{$Destination.property.builder_config}\",\"required\":false},{\"name\":\"rollback_enabled\",\"value\":\"true\",\"required\":false},{\"name\":\"app_name\",\"value\":\"{$Destination.Property.Mule_App_Name}\",\"required\":true},{\"name\":\"client_id\",\"value\":\"{$Pipeline.Property.Mule_Client_Id}\",\"required\":true},{\"name\":\"client_secret\",\"value\":\"{$Pipeline.Property.Mule_Client_Secret}\",\"required\":true},{\"name\":\"environment_name\",\"value\":\"{$Destination.Property.Mule_Environment_Name}\",\"required\":true},{\"name\":\"worker_count\",\"value\":\"{$Destination.Property.Mule_Worker_Count}\",\"required\":false},{\"name\":\"worker_type\",\"value\":\"{$Destination.Property.Mule_Worker_Type}\",\"required\":false},{\"name\":\"skip_test\",\"value\":\"{$Destination.Property.Mule_Skip_Test}\"},{\"name\":\"runtime_version\",\"value\":\"{$Pipeline.Property.Mule_Runtime_Version}\",\"required\":false},{\"name\":\"enterprise_username\",\"value\":\"{$Pipeline.Property.Enterprise_Username}\"},{\"name\":\"enterprise_password\",\"value\":\"{$Pipeline.Property.Enterprise_Password}\"},{\"name\":\"region\",\"value\":\"{$Pipeline.Property.Region}\"},{\"name\":\"verbose_debug\",\"value\":\"false\"},{\"name\":\"environment_properties\",\"value\":\"\"},{\"name\":\"global_properties\",\"value\":\"\"},{\"name\":\"extra_flags\",\"value\":\"\"},{\"name\":\"deploy_from_artifact\",\"value\":\"false\"},{\"name\":\"artifact_username\",\"value\":\"\"},{\"name\":\"artifact_password\",\"value\":\"\"},{\"name\":\"artifact_profile\",\"value\":\"\"},{\"name\":\"artifact_url\",\"value\":\"\"},{\"name\":\"artifact_name\",\"value\":\"\"},{\"name\":\"artifact_id\",\"value\":\"\"},{\"name\":\"application_directory\",\"value\":\"{$Pipeline.Property.Application_Directory}\"},{\"name\":\"environment_type\",\"value\":\"{$Destination.Property.Mule_Environment_Type}\"},{\"name\":\"provider\",\"value\":\"{$Destination.Property.Provider}\"},{\"name\":\"replicas\",\"value\":\"{$Destination.Property.Replicas}\"},{\"name\":\"target\",\"value\":\"{$Destination.Property.Target}\"},{\"name\":\"skip_license\",\"value\":\"{$Destination.Property.Mule_Skip_license}\"},{\"name\":\"client_credentials\",\"value\":\"{$Pipeline.Property.Mule_Client_Credentials}\"}]}",
          "copado__CustomType__c": "Function",
          "copado__JobTemplate__c": "a0u1w000008FQnkAAG",
          "copado__Order__c": 1,
          "copado__Type__c": "Function",
          "Id": "a0t1w000005YqihAAC",
          "Name": "Mule_Deploy"
        }
      ],
      "ObjectType": "copado__JobStep__c"
    }
  ],
  "blobsByUID": {}
}